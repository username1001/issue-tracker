{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","db","get","req","res","filter","query","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","savedIssue","issueId","params","id","issue","sendFile","resolve","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\nimport 'babel-polyfill';\n\nimport path from 'path';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Issue from './issue.js';\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\n\napp.get('/api/issues', (req, res) => {\n  const filter = {};\n  if (req.query.status) filter.status = req.query.status;\n  if (req.query.effort_lte || req.query.effort_gte) filter.effort = {};\n  if (req.query.effort_lte)\n    filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n  if (req.query.effort_gte)\n    filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n\n  db\n    .collection('issues')\n    .find(filter)\n    .toArray()\n    .then(issues => {\n      const metadata = { total_count: issues.length };\n      res.json({ _metadata: metadata, records: issues });\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db\n    .collection('issues')\n    .insertOne(Issue.cleanupIssue(newIssue))\n    .then(result =>\n      db\n        .collection('issues')\n        .find({ _id: result.insertedId })\n        .limit(1)\n        .next()\n    )\n    .then(savedIssue => {\n      res.json(savedIssue);\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.get('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n\n  db\n    .collection('issues')\n    .find({ _id: issueId })\n    .limit(1)\n    .next()\n    .then(issue => {\n      if (!issue)\n        res.status(404).json({ message: `No such issue: ${issueId}` });\n      else res.json(issue);\n    })\n    .catch(error => {\n      console.log(error);\n      res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('static/index.html'));\n});\n\nMongoClient.connect('mongodb://localhost/issuetracker')\n  .then(connection => {\n    db = connection;\n    app.listen(3000, () => {\n      console.log('App started on port 3000');\n    });\n  })\n  .catch(error => {\n    console.log('ERROR:', error);\n  });\n"]}